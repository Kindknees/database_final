// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    output   = "../generated/prisma"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

enum Role {
    ADMIN
    DOCTOR
    PATIENT
}

enum ConsultationStatus {
    PENDING
    IN_PROGRESS
    COMPLETED

    CANCELLED
}

model User {
    // account for a user signable
    id String @id @default(cuid())

    // username String  @unique
    email    String @unique
    password String

    name    String?
    phone   String?
    address String?

    emailVerified DateTime?
    image         String?
    sessions      Session[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // custom fields below
    role    Role     @default(PATIENT)
    doctor  Doctor?
    patient Patient?
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Patient {
    id String @id @default(cuid())

    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    // custom fields below
    bio String?

    consultations Consultation[]
    appointments  Appointment[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Doctor {
    id String @id @default(cuid())

    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    // custom fields below
    bio String?

    schedules     Schedule[]
    appointments  Appointment[]
    consultations Consultation[]

    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
    Department   Department? @relation(fields: [departmentId], references: [id])
    departmentId String?
}

model Consultation {
    id String @id @default(cuid())

    doctorId String
    doctor   Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)

    patientId String
    patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

    // custom fields below
    description  String?
    prescription String?
    status       ConsultationStatus? @default(PENDING)

    rating   Int?
    feedback String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Appointment {
    id String @id @default(cuid())

    doctorId String
    doctor   Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)

    patientId String
    patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

    // custom fields below
    slot Int // from 0 to 20
    feedback  Feedback[]
    status String? @default("PENDING")

    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
}

model Schedule {
    id String @id @default(cuid())

    doctorId String
    doctor   Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)

    // custom fields below
    slots Int[] // number of slots available for the day

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Feedback {
    id String @id @default(cuid())

    appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
    appointmentId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Department {
    id String @id @default(cuid())

    name String @unique

    // custom fields below
    description String?

    doctors Doctor[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
